# Generated by Django 3.1 on 2020-08-27 18:08

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Assembly',
            fields=[
                ('assembly_id', models.AutoField(primary_key=True, serialize=False)),
                ('assembly_accession', models.CharField(blank=True, max_length=16, null=True)),
                ('assembly_name', models.CharField(max_length=200)),
                ('assembly_default', models.CharField(max_length=200)),
                ('assembly_ucsc', models.CharField(blank=True, max_length=16, null=True)),
                ('assembly_level', models.CharField(max_length=50)),
                ('base_count', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'assembly',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AssemblySequence',
            fields=[
                ('assembly_sequence_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('acc', models.CharField(blank=True, max_length=24, null=True)),
            ],
            options={
                'db_table': 'assembly_sequence',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.IntegerField()),
                ('permission_id', models.IntegerField()),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('content_type_id', models.IntegerField()),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ComparaAnalysis',
            fields=[
                ('compara_analysis_id', models.AutoField(primary_key=True, serialize=False)),
                ('data_release_id', models.PositiveIntegerField()),
                ('method', models.CharField(max_length=50)),
                ('set_name', models.CharField(blank=True, max_length=128, null=True)),
                ('dbname', models.CharField(max_length=64)),
            ],
            options={
                'db_table': 'compara_analysis',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ComparaAnalysisEvent',
            fields=[
                ('compara_analysis_event_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=32)),
                ('source', models.CharField(blank=True, max_length=128, null=True)),
                ('creation_time', models.DateTimeField()),
                ('details', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'compara_analysis_event',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataRelease',
            fields=[
                ('data_release_id', models.AutoField(primary_key=True, serialize=False)),
                ('ensembl_version', models.PositiveIntegerField()),
                ('ensembl_genomes_version', models.PositiveIntegerField(blank=True, null=True)),
                ('release_date', models.DateField()),
                ('is_current', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'data_release',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataReleaseDatabase',
            fields=[
                ('data_release_database_id', models.AutoField(primary_key=True, serialize=False)),
                ('dbname', models.CharField(max_length=64)),
                ('type', models.CharField(blank=True, max_length=8, null=True)),
            ],
            options={
                'db_table': 'data_release_database',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataReleaseDatabaseEvent',
            fields=[
                ('data_release_database_event_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=32)),
                ('source', models.CharField(blank=True, max_length=128, null=True)),
                ('creation_time', models.DateTimeField()),
                ('details', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'data_release_database_event',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('division_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('short_name', models.CharField(max_length=8, unique=True)),
            ],
            options={
                'db_table': 'division',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Genome',
            fields=[
                ('genome_id', models.AutoField(primary_key=True, serialize=False)),
                ('genebuild', models.CharField(max_length=64)),
                ('has_pan_compara', models.PositiveIntegerField()),
                ('has_variations', models.PositiveIntegerField()),
                ('has_peptide_compara', models.PositiveIntegerField()),
                ('has_genome_alignments', models.PositiveIntegerField()),
                ('has_synteny', models.PositiveIntegerField()),
                ('has_other_alignments', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'genome',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GenomeAlignment',
            fields=[
                ('genome_alignment_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=32)),
                ('name', models.CharField(max_length=128)),
                ('count', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'genome_alignment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GenomeAnnotation',
            fields=[
                ('genome_annotation_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=32)),
                ('value', models.CharField(max_length=128)),
            ],
            options={
                'db_table': 'genome_annotation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GenomeComparaAnalysis',
            fields=[
                ('genome_compara_analysis_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'genome_compara_analysis',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GenomeDatabase',
            fields=[
                ('genome_database_id', models.AutoField(primary_key=True, serialize=False)),
                ('dbname', models.CharField(max_length=64)),
                ('species_id', models.PositiveIntegerField()),
                ('type', models.CharField(blank=True, max_length=13, null=True)),
            ],
            options={
                'db_table': 'genome_database',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GenomeEvent',
            fields=[
                ('genome_event_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=32)),
                ('source', models.CharField(blank=True, max_length=128, null=True)),
                ('creation_time', models.DateTimeField()),
                ('details', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'genome_event',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GenomeFeature',
            fields=[
                ('genome_feature_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=32)),
                ('analysis', models.CharField(max_length=128)),
                ('count', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'genome_feature',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GenomeVariation',
            fields=[
                ('genome_variation_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=32)),
                ('name', models.CharField(max_length=128)),
                ('count', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'genome_variation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('group_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(blank=True, max_length=255, null=True)),
                ('label', models.CharField(blank=True, max_length=255, null=True)),
                ('reference_organism_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Organism',
            fields=[
                ('organism_id', models.AutoField(primary_key=True, serialize=False)),
                ('taxonomy_id', models.PositiveIntegerField()),
                ('is_reference', models.PositiveIntegerField()),
                ('species_taxonomy_id', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=128, unique=True)),
                ('url_name', models.CharField(max_length=128)),
                ('display_name', models.CharField(max_length=128)),
                ('scientific_name', models.CharField(max_length=128)),
                ('strain', models.CharField(blank=True, max_length=128, null=True)),
                ('serotype', models.CharField(blank=True, max_length=128, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', models.TextField(blank=True, null=True)),
                ('reference', models.CharField(blank=True, max_length=128, null=True)),
                ('group_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'organism',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OrganismAlias',
            fields=[
                ('organism_alias_id', models.AutoField(primary_key=True, serialize=False)),
                ('alias', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'organism_alias',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OrganismPublication',
            fields=[
                ('organism_publication_id', models.AutoField(primary_key=True, serialize=False)),
                ('publication', models.CharField(blank=True, max_length=64, null=True)),
            ],
            options={
                'db_table': 'organism_publication',
                'managed': False,
            },
        ),
    ]
